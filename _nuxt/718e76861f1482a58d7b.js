(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{263:function(e,o){e.exports={body:'\tmeme de programador y la documentacion? //desaparece\r\n\r\nLa documentacion de nuestro codigo nunca nos suele parecer prioridad y si ...\r\n\r\nPor qué gastariamos tiempo y esfuerzo en ir documentando nusetro codigo? Veamos algunos puntos:\r\n\r\n* Permite a los desarrolladores que retomen el proyecto adaptarse mas facilmente a nuestro código.\r\n* Muy dificilmente recordaremos en un mes o mas lo que codificamos hoy. Para qué era tal variable, qué hacia "x" funcion.\r\n* Prediccion del editor \r\n\r\n\r\ncomo documentar?\r\ndigamos que no basta con poner algo como \r\n```js\r\n// algo tipico en la docu no se ...\r\n```\r\n\r\nhay maneras de hacerlo y una de ellas bastante aceptada es es utilizar [JSDoc](https://jsdoc.app) sobre todo si queremos beneficiarnos de la prediccion del editor como podria ser vscode([que integra jsdoc de maravilla](https://code.visualstudio.com/updates/v1_22#_improved-quick-suggestions-in-jsdoc)).\r\n\r\nDe hecho si somos un poco curiosos habremos notado que vscode por si solo ya trata de inferir los tipos de datos que reciben nuestras variables ahora si vamos documentando esto se mejor mucho man aun.\r\n\r\nVeamos un ejemplo, teniendo estas 2 funciones:\r\n\r\n```js\r\nconst sinJSDoc=(argA, argB)=>{\r\n\treturn 42;\r\n}\r\n\r\n/**\r\n * Funcion de ejemplo\r\n * @param {boolean} argA - Recibe un valor booleano\r\n * @param {number} argB - recibe un numero\r\n * @returns {number} Numero de retorno\r\n */\r\nconst conSDoc=(argA, argB)=>{\r\n\treturn 42;\r\n}\r\n```\r\n\r\nEl resultado seria el siguiente:\r\n\r\n\tambos gif\r\n\r\nVemos mucho mas claro el beneficio a la hora de invocar nuestras funcioes:\r\n\r\n\tgif de invocacion\r\n\r\nCual es su sintaxis?\r\n* Cada comentario debe empezar con ___/**___\r\n* El comentario debe ir justo antes de lo que deseamos comentar, ya sea un objeto, funcion, clase o cualquier otro elemento.\r\n* Para agrega mas informacion al comentario JSDoc nos provee de "_tags_" como _@param_, _@return_. Entre otros.\r\n\r\nAunque JSDoc tiene una gran variedad de _tags_ no todos nos soportados por vscode. Los soportados por vscode son:\r\n\r\n* @type\r\n* @param (or @arg or @argument)\r\n* @returns (or @return)\r\n* @typedef\r\n* @callback\r\n* @template\r\n* @class (or @constructor)\r\n* @this\r\n* @extends (or @augments)\r\n* @enum\r\n\r\nPara mas info [docu oficial](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc)',html:'<pre><code>meme de programador y la documentacion? //desaparece\n</code></pre>\n<p>La documentacion de nuestro codigo nunca nos suele parecer prioridad y si ...</p>\n<p>Por qué gastariamos tiempo y esfuerzo en ir documentando nusetro codigo? Veamos algunos puntos:</p>\n<ul>\n<li>Permite a los desarrolladores que retomen el proyecto adaptarse mas facilmente a nuestro código.</li>\n<li>Muy dificilmente recordaremos en un mes o mas lo que codificamos hoy. Para qué era tal variable, qué hacia &quot;x&quot; funcion.</li>\n<li>Prediccion del editor</li>\n</ul>\n<p>como documentar?\ndigamos que no basta con poner algo como</p>\n<pre><code class="language-js">// algo tipico en la docu no se ...\n</code></pre>\n<p>hay maneras de hacerlo y una de ellas bastante aceptada es es utilizar <a href="https://jsdoc.app">JSDoc</a> sobre todo si queremos beneficiarnos de la prediccion del editor como podria ser vscode(<a href="https://code.visualstudio.com/updates/v1_22#_improved-quick-suggestions-in-jsdoc">que integra jsdoc de maravilla</a>).</p>\n<p>De hecho si somos un poco curiosos habremos notado que vscode por si solo ya trata de inferir los tipos de datos que reciben nuestras variables ahora si vamos documentando esto se mejor mucho man aun.</p>\n<p>Veamos un ejemplo, teniendo estas 2 funciones:</p>\n<pre><code class="language-js">const sinJSDoc=(argA, argB)=&gt;{\n\treturn 42;\n}\n\n/**\n * Funcion de ejemplo\n * @param {boolean} argA - Recibe un valor booleano\n * @param {number} argB - recibe un numero\n * @returns {number} Numero de retorno\n */\nconst conSDoc=(argA, argB)=&gt;{\n\treturn 42;\n}\n</code></pre>\n<p>El resultado seria el siguiente:</p>\n<pre><code>ambos gif\n</code></pre>\n<p>Vemos mucho mas claro el beneficio a la hora de invocar nuestras funcioes:</p>\n<pre><code>gif de invocacion\n</code></pre>\n<p>Cual es su sintaxis?</p>\n<ul>\n<li>Cada comentario debe empezar con <em><strong>/**</strong></em></li>\n<li>El comentario debe ir justo antes de lo que deseamos comentar, ya sea un objeto, funcion, clase o cualquier otro elemento.</li>\n<li>Para agrega mas informacion al comentario JSDoc nos provee de &quot;<em>tags</em>&quot; como <em>@param</em>, <em>@return</em>. Entre otros.</li>\n</ul>\n<p>Aunque JSDoc tiene una gran variedad de <em>tags</em> no todos nos soportados por vscode. Los soportados por vscode son:</p>\n<ul>\n<li>@type</li>\n<li>@param (or @arg or @argument)</li>\n<li>@returns (or @return)</li>\n<li>@typedef</li>\n<li>@callback</li>\n<li>@template</li>\n<li>@class (or @constructor)</li>\n<li>@this</li>\n<li>@extends (or @augments)</li>\n<li>@enum</li>\n</ul>\n<p>Para mas info <a href="https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc">docu oficial</a></p>\n',attributes:{_meta:{resourcePath:"C:\\Users\\rocke\\Documents\\Projects\\blog\\assets\\articulos\\Documentando-JS.md"}},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"frontmatter-markdown"},[_c(\'pre\',[_c(\'code\',{pre:true},[_vm._v("meme de programador y la documentacion? //desaparece\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("La documentacion de nuestro codigo nunca nos suele parecer prioridad y si ...")]),_vm._v(" "),_c(\'p\',[_vm._v("Por qué gastariamos tiempo y esfuerzo en ir documentando nusetro codigo? Veamos algunos puntos:")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_vm._v("Permite a los desarrolladores que retomen el proyecto adaptarse mas facilmente a nuestro código.")]),_vm._v(" "),_c(\'li\',[_vm._v("Muy dificilmente recordaremos en un mes o mas lo que codificamos hoy. Para qué era tal variable, qué hacia \\"x\\" funcion.")]),_vm._v(" "),_c(\'li\',[_vm._v("Prediccion del editor")])]),_vm._v(" "),_c(\'p\',[_vm._v("como documentar?\\ndigamos que no basta con poner algo como")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-js"}},[_vm._v("// algo tipico en la docu no se ...\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("hay maneras de hacerlo y una de ellas bastante aceptada es es utilizar "),_c(\'a\',{attrs:{"href":"https://jsdoc.app"}},[_vm._v("JSDoc")]),_vm._v(" sobre todo si queremos beneficiarnos de la prediccion del editor como podria ser vscode("),_c(\'a\',{attrs:{"href":"https://code.visualstudio.com/updates/v1_22#_improved-quick-suggestions-in-jsdoc"}},[_vm._v("que integra jsdoc de maravilla")]),_vm._v(").")]),_vm._v(" "),_c(\'p\',[_vm._v("De hecho si somos un poco curiosos habremos notado que vscode por si solo ya trata de inferir los tipos de datos que reciben nuestras variables ahora si vamos documentando esto se mejor mucho man aun.")]),_vm._v(" "),_c(\'p\',[_vm._v("Veamos un ejemplo, teniendo estas 2 funciones:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-js"}},[_vm._v("const sinJSDoc=(argA, argB)=>{\\n\\treturn 42;\\n}\\n\\n/**\\n * Funcion de ejemplo\\n * @param {boolean} argA - Recibe un valor booleano\\n * @param {number} argB - recibe un numero\\n * @returns {number} Numero de retorno\\n */\\nconst conSDoc=(argA, argB)=>{\\n\\treturn 42;\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("El resultado seria el siguiente:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true},[_vm._v("ambos gif\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Vemos mucho mas claro el beneficio a la hora de invocar nuestras funcioes:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true},[_vm._v("gif de invocacion\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Cual es su sintaxis?")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_vm._v("Cada comentario debe empezar con "),_c(\'em\',[_c(\'strong\',[_vm._v("/**")])])]),_vm._v(" "),_c(\'li\',[_vm._v("El comentario debe ir justo antes de lo que deseamos comentar, ya sea un objeto, funcion, clase o cualquier otro elemento.")]),_vm._v(" "),_c(\'li\',[_vm._v("Para agrega mas informacion al comentario JSDoc nos provee de \\""),_c(\'em\',[_vm._v("tags")]),_vm._v("\\" como "),_c(\'em\',[_vm._v("@param")]),_vm._v(", "),_c(\'em\',[_vm._v("@return")]),_vm._v(". Entre otros.")])]),_vm._v(" "),_c(\'p\',[_vm._v("Aunque JSDoc tiene una gran variedad de "),_c(\'em\',[_vm._v("tags")]),_vm._v(" no todos nos soportados por vscode. Los soportados por vscode son:")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_vm._v("@type")]),_vm._v(" "),_c(\'li\',[_vm._v("@param (or @arg or @argument)")]),_vm._v(" "),_c(\'li\',[_vm._v("@returns (or @return)")]),_vm._v(" "),_c(\'li\',[_vm._v("@typedef")]),_vm._v(" "),_c(\'li\',[_vm._v("@callback")]),_vm._v(" "),_c(\'li\',[_vm._v("@template")]),_vm._v(" "),_c(\'li\',[_vm._v("@class (or @constructor)")]),_vm._v(" "),_c(\'li\',[_vm._v("@this")]),_vm._v(" "),_c(\'li\',[_vm._v("@extends (or @augments)")]),_vm._v(" "),_c(\'li\',[_vm._v("@enum")])]),_vm._v(" "),_c(\'p\',[_vm._v("Para mas info "),_c(\'a\',{attrs:{"href":"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc"}},[_vm._v("docu oficial")])])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this.$createElement;this._self._c;return this._m(0)},this.$options.staticRenderFns=[function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("div",{staticClass:"frontmatter-markdown"},[r("pre",[r("code",{pre:!0},[e._v("meme de programador y la documentacion? //desaparece\n")])]),e._v(" "),r("p",[e._v("La documentacion de nuestro codigo nunca nos suele parecer prioridad y si ...")]),e._v(" "),r("p",[e._v("Por qué gastariamos tiempo y esfuerzo en ir documentando nusetro codigo? Veamos algunos puntos:")]),e._v(" "),r("ul",[r("li",[e._v("Permite a los desarrolladores que retomen el proyecto adaptarse mas facilmente a nuestro código.")]),e._v(" "),r("li",[e._v('Muy dificilmente recordaremos en un mes o mas lo que codificamos hoy. Para qué era tal variable, qué hacia "x" funcion.')]),e._v(" "),r("li",[e._v("Prediccion del editor")])]),e._v(" "),r("p",[e._v("como documentar?\ndigamos que no basta con poner algo como")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-js"}},[e._v("// algo tipico en la docu no se ...\n")])]),e._v(" "),r("p",[e._v("hay maneras de hacerlo y una de ellas bastante aceptada es es utilizar "),r("a",{attrs:{href:"https://jsdoc.app"}},[e._v("JSDoc")]),e._v(" sobre todo si queremos beneficiarnos de la prediccion del editor como podria ser vscode("),r("a",{attrs:{href:"https://code.visualstudio.com/updates/v1_22#_improved-quick-suggestions-in-jsdoc"}},[e._v("que integra jsdoc de maravilla")]),e._v(").")]),e._v(" "),r("p",[e._v("De hecho si somos un poco curiosos habremos notado que vscode por si solo ya trata de inferir los tipos de datos que reciben nuestras variables ahora si vamos documentando esto se mejor mucho man aun.")]),e._v(" "),r("p",[e._v("Veamos un ejemplo, teniendo estas 2 funciones:")]),e._v(" "),r("pre",[r("code",{pre:!0,attrs:{class:"language-js"}},[e._v("const sinJSDoc=(argA, argB)=>{\n\treturn 42;\n}\n\n/**\n * Funcion de ejemplo\n * @param {boolean} argA - Recibe un valor booleano\n * @param {number} argB - recibe un numero\n * @returns {number} Numero de retorno\n */\nconst conSDoc=(argA, argB)=>{\n\treturn 42;\n}\n")])]),e._v(" "),r("p",[e._v("El resultado seria el siguiente:")]),e._v(" "),r("pre",[r("code",{pre:!0},[e._v("ambos gif\n")])]),e._v(" "),r("p",[e._v("Vemos mucho mas claro el beneficio a la hora de invocar nuestras funcioes:")]),e._v(" "),r("pre",[r("code",{pre:!0},[e._v("gif de invocacion\n")])]),e._v(" "),r("p",[e._v("Cual es su sintaxis?")]),e._v(" "),r("ul",[r("li",[e._v("Cada comentario debe empezar con "),r("em",[r("strong",[e._v("/**")])])]),e._v(" "),r("li",[e._v("El comentario debe ir justo antes de lo que deseamos comentar, ya sea un objeto, funcion, clase o cualquier otro elemento.")]),e._v(" "),r("li",[e._v('Para agrega mas informacion al comentario JSDoc nos provee de "'),r("em",[e._v("tags")]),e._v('" como '),r("em",[e._v("@param")]),e._v(", "),r("em",[e._v("@return")]),e._v(". Entre otros.")])]),e._v(" "),r("p",[e._v("Aunque JSDoc tiene una gran variedad de "),r("em",[e._v("tags")]),e._v(" no todos nos soportados por vscode. Los soportados por vscode son:")]),e._v(" "),r("ul",[r("li",[e._v("@type")]),e._v(" "),r("li",[e._v("@param (or @arg or @argument)")]),e._v(" "),r("li",[e._v("@returns (or @return)")]),e._v(" "),r("li",[e._v("@typedef")]),e._v(" "),r("li",[e._v("@callback")]),e._v(" "),r("li",[e._v("@template")]),e._v(" "),r("li",[e._v("@class (or @constructor)")]),e._v(" "),r("li",[e._v("@this")]),e._v(" "),r("li",[e._v("@extends (or @augments)")]),e._v(" "),r("li",[e._v("@enum")])]),e._v(" "),r("p",[e._v("Para mas info "),r("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc"}},[e._v("docu oficial")])])])}]}}}}}}]);